import torch
import torch.nn as nn
class MyModel(nn.Module):
    def __init__(self, num_classes=4):
        super(MyModel, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)
        self.elu1 = nn.ELU()
        self.bn1 = nn.BatchNorm2d(32)
        self.conv2 = nn.Conv2d(32, 32, kernel_size=3, padding=1)
        self.elu2 = nn.ELU()
        self.bn2 = nn.BatchNorm2d(32)
        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.dropout1 = nn.Dropout(p=0.2)
        self.conv3 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.elu3 = nn.ELU()
        self.bn3 = nn.BatchNorm2d(64)
        self.conv4 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.elu4 = nn.ELU()
        self.bn4 = nn.BatchNorm2d(64)
        self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.dropout2 = nn.Dropout(p=0.3)
        self.conv5 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.elu5 = nn.ELU()
        self.bn5 = nn.BatchNorm2d(128)
        self.conv6 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.elu6 = nn.ELU()
        self.bn6 = nn.BatchNorm2d(128)
        self.pool3 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.dropout3 = nn.Dropout(p=0.4)
        self.fc1 = nn.Linear(100352, 256)
        self.elu7 = nn.ELU()
        self.bn7 = nn.BatchNorm1d(256)
        self.dropout4 = nn.Dropout(p=0.6)
        self.fc2 = nn.Linear(256, num_classes)
        
    def forward(self, x):
        x = self.bn1(self.elu1(self.conv1(x)))
        x = self.bn2(self.elu2(self.conv2(x)))
        x = self.dropout1(self.pool1(x))
        x = self.bn3(self.elu3(self.conv3(x)))
        x = self.bn4(self.elu4(self.conv4(x)))
        x = self.dropout2(self.pool2(x))
        x = self.bn5(self.elu5(self.conv5(x)))
        x = self.bn6(self.elu6(self.conv6(x)))
        x = self.dropout3(self.pool3(x))
        x = torch.flatten(x, start_dim=1)
        x = self.bn7(self.elu7(self.fc1(x)))
        x = self.dropout4(x)
        x = self.fc2(x)
        return x
